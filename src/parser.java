
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package src;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\004\011\000\002\005\004\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\013\005" +
    "\000\002\016\003\000\002\016\003\000\002\014\005\000" +
    "\002\015\003\000\002\015\005\000\002\017\003\000\002" +
    "\017\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\005\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\005\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\005\000\002\022\003" +
    "\000\002\022\005\000\002\023\011\000\002\024\011\000" +
    "\002\024\012\000\002\057\006\000\002\025\011\000\002" +
    "\026\013\000\002\027\015\000\002\030\003\000\002\030" +
    "\004\000\002\030\005\000\002\030\004\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\004\000" +
    "\002\031\003\000\002\032\003\000\002\056\003\000\002" +
    "\056\003\000\002\033\003\000\002\033\005\000\002\034" +
    "\005\000\002\034\006\000\002\034\003\000\002\034\003" +
    "\000\002\035\005\000\002\036\004\000\002\036\003\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\037\003\000\002\037\004\000\002\040\004" +
    "\000\002\040\006\000\002\041\012\000\002\041\011\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\010\000\002\043\010\000\002\044\005\000\002\045\006" +
    "\000\002\045\006\000\002\045\007\000\002\045\006\000" +
    "\002\046\004\000\002\047\005\000\002\050\006\000\002" +
    "\051\003\000\002\051\003\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\016\036\005\037\017\040\012\041\016\042" +
    "\007\043\006\001\002\000\004\002\000\001\002\000\006" +
    "\044\365\064\uff9d\001\002\000\004\064\uff98\001\002\000" +
    "\004\064\uff99\001\002\000\020\002\uffff\036\022\037\017" +
    "\040\012\041\016\042\007\043\006\001\002\000\004\002" +
    "\363\001\002\000\004\064\uff9a\001\002\000\016\036\005" +
    "\037\017\040\012\041\016\042\007\043\006\001\002\000" +
    "\004\064\020\001\002\000\020\002\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\001\002\000\004\064" +
    "\uff9c\001\002\000\004\064\uff9b\001\002\000\004\010\021" +
    "\001\002\000\020\011\023\036\022\037\017\040\012\041" +
    "\016\042\007\043\006\001\002\000\004\064\uff9d\001\002" +
    "\000\004\017\355\001\002\000\004\064\354\001\002\000" +
    "\006\011\027\021\026\001\002\000\016\036\022\037\017" +
    "\040\012\041\016\042\007\043\006\001\002\000\004\017" +
    "\030\001\002\000\064\010\037\012\062\015\032\033\053" +
    "\034\057\036\040\037\017\040\012\041\034\042\007\043" +
    "\006\045\054\050\075\051\107\052\042\053\055\054\064" +
    "\055\100\056\052\057\070\060\065\061\101\062\061\063" +
    "\073\064\110\001\002\000\042\007\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\016\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\065\uffd5" +
    "\001\002\000\034\010\037\012\062\015\032\033\053\034" +
    "\057\055\100\056\052\057\070\060\065\061\101\062\061" +
    "\063\073\064\116\001\002\000\026\007\254\011\ufff7\012" +
    "\257\013\252\016\ufff7\021\ufff7\024\260\031\255\032\256" +
    "\065\ufff7\001\002\000\004\064\343\001\002\000\066\010" +
    "\uffab\012\uffab\015\uffab\020\uffab\033\uffab\034\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\045\uffab\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\001" +
    "\002\000\042\007\uffaf\011\uffaf\012\uffaf\013\uffaf\016\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\065\uffaf\001\002\000\034" +
    "\010\246\012\062\015\032\033\053\034\057\055\100\056" +
    "\052\057\070\060\065\061\247\062\061\063\073\064\116" +
    "\001\002\000\004\064\336\001\002\000\042\007\uffae\011" +
    "\uffae\012\uffae\013\uffae\016\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\065\uffae\001\002\000\004\010\314\001\002\000\022" +
    "\004\uffde\005\uffde\006\uffde\011\uffde\016\uffde\021\uffde\035" +
    "\uffde\065\uffde\001\002\000\066\010\037\012\062\015\032" +
    "\020\313\033\053\034\057\036\040\037\017\040\012\041" +
    "\034\042\007\043\006\045\054\050\075\051\107\052\042" +
    "\053\055\054\064\055\100\056\052\057\070\060\065\061" +
    "\101\062\061\063\073\064\110\001\002\000\016\022\310" +
    "\023\311\025\304\026\303\027\306\030\307\001\002\000" +
    "\004\065\302\001\002\000\042\007\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\016\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\065\uffd4" +
    "\001\002\000\042\007\uffe3\011\uffe3\012\uffe3\013\uffe3\016" +
    "\uffe3\021\uffe3\022\uffd1\023\uffd1\024\uffe3\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffe3\032\uffe3\065\uffe3\001\002\000" +
    "\004\065\301\001\002\000\004\010\276\001\002\000\004" +
    "\064\275\001\002\000\004\010\267\001\002\000\036\010" +
    "\037\012\062\015\032\033\053\034\057\055\100\056\052" +
    "\057\070\060\065\061\101\062\061\063\073\064\116\065" +
    "\uffb7\001\002\000\004\065\265\001\002\000\004\064\264" +
    "\001\002\000\022\004\237\005\241\006\235\011\uffe0\016" +
    "\uffe0\021\uffe0\035\236\065\uffe0\001\002\000\042\007\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\016\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\065\uffd6\001\002\000\006\057\166\060\167\001" +
    "\002\000\004\065\233\001\002\000\004\065\uffb6\001\002" +
    "\000\042\007\uffd7\011\uffd7\012\uffd7\013\uffd7\016\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\065\uffd7\001\002\000\066\010" +
    "\uffbb\012\uffbb\015\uffbb\020\uffbb\033\uffbb\034\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001" +
    "\002\000\072\010\uffbf\012\uffbf\015\uffbf\020\uffbf\033\uffbf" +
    "\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\045\uffbf\046\207\047\206\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000\042\007\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\016\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\065\uffd8\001\002\000\004\065\205\001\002\000" +
    "\004\064\177\001\002\000\042\007\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\016\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\065\uffd9" +
    "\001\002\000\066\010\uffb9\012\uffb9\015\uffb9\020\uffb9\033" +
    "\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\045\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\001\002\000\004\010\171\001\002\000" +
    "\066\010\uffa3\012\uffa3\015\uffa3\020\uffa3\033\uffa3\034\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\045" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\001\002\000\012\011\ufff8\016\ufff8\021\ufff8\065\ufff8" +
    "\001\002\000\004\010\164\001\002\000\036\004\uffdc\005" +
    "\uffdc\006\uffdc\011\uffdc\016\uffdc\021\uffdc\022\uffd0\023\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\035\uffdc\065\uffdc\001" +
    "\002\000\004\065\163\001\002\000\036\007\uffd2\012\uffd2" +
    "\013\uffd2\014\160\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\065\161\001\002" +
    "\000\012\011\uffe1\016\uffe1\021\uffe1\065\uffe1\001\002\000" +
    "\004\065\157\001\002\000\066\010\uffba\012\uffba\015\uffba" +
    "\020\uffba\033\uffba\034\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\045\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\001\002\000\004\017\145" +
    "\001\002\000\042\007\uffda\010\112\012\uffda\013\uffda\014" +
    "\114\015\113\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\065\uffda\001\002\000" +
    "\044\007\uff90\011\uff90\012\uff90\013\uff90\014\uff90\016\uff90" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\065\uff90\001\002\000\022" +
    "\011\131\015\134\057\122\060\127\061\125\062\123\063" +
    "\126\064\132\001\002\000\004\057\120\001\002\000\034" +
    "\010\037\012\062\015\032\033\053\034\057\055\100\056" +
    "\052\057\070\060\065\061\101\062\061\063\073\064\116" +
    "\001\002\000\004\065\uffad\001\002\000\046\007\uffda\010" +
    "\112\011\uffda\012\uffda\013\uffda\015\113\016\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\065\uffda\001\002\000\042\007\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\016\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\065\uffd2\001\002\000\004\016\121\001\002\000" +
    "\044\007\uff95\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\065\uff95\001\002\000\006" +
    "\011\uffce\021\uffce\001\002\000\006\011\uffca\021\uffca\001" +
    "\002\000\006\011\uffb3\021\uffb3\001\002\000\006\011\uffcc" +
    "\021\uffcc\001\002\000\006\011\uffcb\021\uffcb\001\002\000" +
    "\006\011\uffcd\021\uffcd\001\002\000\006\011\143\021\142" +
    "\001\002\000\042\007\uffb1\011\uffb1\012\uffb1\013\uffb1\016" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\065\uffb1\001\002\000" +
    "\006\011\uffb5\021\uffb5\001\002\000\006\011\uffb4\021\uffb4" +
    "\001\002\000\034\010\037\012\062\015\032\033\053\034" +
    "\057\055\100\056\052\057\070\060\065\061\101\062\061" +
    "\063\073\064\116\001\002\000\006\016\uffc8\021\uffc8\001" +
    "\002\000\006\016\140\021\137\001\002\000\034\010\037" +
    "\012\062\015\032\033\053\034\057\055\100\056\052\057" +
    "\070\060\065\061\101\062\061\063\073\064\116\001\002" +
    "\000\006\011\uffc9\021\uffc9\001\002\000\006\016\uffc7\021" +
    "\uffc7\001\002\000\034\010\037\012\062\015\032\033\053" +
    "\034\057\055\100\056\052\057\070\060\065\061\101\062" +
    "\061\063\073\064\116\001\002\000\042\007\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\065\uffb0\001\002\000\006\011\uffb2\021\uffb2\001\002\000" +
    "\064\010\037\012\062\015\032\033\053\034\057\036\040" +
    "\037\017\040\012\041\034\042\007\043\006\045\054\050" +
    "\075\051\107\052\042\053\055\054\064\055\100\056\052" +
    "\057\070\060\065\061\101\062\061\063\073\064\110\001" +
    "\002\000\066\010\037\012\062\015\032\020\147\033\053" +
    "\034\057\036\040\037\017\040\012\041\034\042\007\043" +
    "\006\045\054\050\075\051\107\052\042\053\055\054\064" +
    "\055\100\056\052\057\070\060\065\061\101\062\061\063" +
    "\073\064\110\001\002\000\004\050\151\001\002\000\066" +
    "\010\uffa2\012\uffa2\015\uffa2\020\uffa2\033\uffa2\034\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\045\uffa2" +
    "\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\001\002\000\004\010\152\001\002\000\034\010\037\012" +
    "\062\015\032\033\053\034\057\055\100\056\052\057\070" +
    "\060\065\061\101\062\061\063\073\064\116\001\002\000" +
    "\004\011\155\001\002\000\026\011\uffd1\016\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\065" +
    "\uffd1\001\002\000\004\065\156\001\002\000\066\010\uffc1" +
    "\012\uffc1\015\uffc1\020\uffc1\033\uffc1\034\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\001\002" +
    "\000\066\010\uffac\012\uffac\015\uffac\020\uffac\033\uffac\034" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\045\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\001\002\000\034\010\037\012\062\015\032\033" +
    "\053\034\057\055\100\056\052\057\070\060\065\061\101" +
    "\062\061\063\073\064\116\001\002\000\066\010\uffa5\012" +
    "\uffa5\015\uffa5\020\uffa5\033\uffa5\034\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\045\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\001\002\000" +
    "\004\065\uff8f\001\002\000\066\010\uffa7\012\uffa7\015\uffa7" +
    "\020\uffa7\033\uffa7\034\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\045\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002\000\006\057\166" +
    "\060\167\001\002\000\004\011\170\001\002\000\042\007" +
    "\uff8d\011\uff8d\012\uff8d\013\uff8d\016\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\065\uff8d\001\002\000\042\007\uff8c\011\uff8c" +
    "\012\uff8c\013\uff8c\016\uff8c\021\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\065\uff8c\001\002\000\042\007\uff8e\011\uff8e\012\uff8e\013" +
    "\uff8e\016\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\065\uff8e\001" +
    "\002\000\034\010\037\012\062\015\032\033\053\034\057" +
    "\055\100\056\052\057\070\060\065\061\101\062\061\063" +
    "\073\064\116\001\002\000\004\011\173\001\002\000\004" +
    "\017\174\001\002\000\064\010\037\012\062\015\032\033" +
    "\053\034\057\036\040\037\017\040\012\041\034\042\007" +
    "\043\006\045\054\050\075\051\107\052\042\053\055\054" +
    "\064\055\100\056\052\057\070\060\065\061\101\062\061" +
    "\063\073\064\110\001\002\000\066\010\037\012\062\015" +
    "\032\020\176\033\053\034\057\036\040\037\017\040\012" +
    "\041\034\042\007\043\006\045\054\050\075\051\107\052" +
    "\042\053\055\054\064\055\100\056\052\057\070\060\065" +
    "\061\101\062\061\063\073\064\110\001\002\000\066\010" +
    "\uffc2\012\uffc2\015\uffc2\020\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\045\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\001" +
    "\002\000\006\014\201\015\113\001\002\000\004\014\203" +
    "\001\002\000\034\010\037\012\062\015\032\033\053\034" +
    "\057\055\100\056\052\057\070\060\065\061\101\062\061" +
    "\063\073\064\116\001\002\000\004\065\uff91\001\002\000" +
    "\034\010\037\012\062\015\032\033\053\034\057\055\100" +
    "\056\052\057\070\060\065\061\101\062\061\063\073\064" +
    "\116\001\002\000\004\065\uff92\001\002\000\066\010\uffa8" +
    "\012\uffa8\015\uffa8\020\uffa8\033\uffa8\034\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\045\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\001\002" +
    "\000\004\017\230\001\002\000\004\010\222\001\002\000" +
    "\066\010\uffbc\012\uffbc\015\uffbc\020\uffbc\033\uffbc\034\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\045" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\001\002\000\072\010\uffbe\012\uffbe\015\uffbe\020\uffbe" +
    "\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\045\uffbe\046\212\047\206\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000\004" +
    "\010\214\001\002\000\066\010\uffbd\012\uffbd\015\uffbd\020" +
    "\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\045\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\001\002\000\034\010\037\012" +
    "\062\015\032\033\053\034\057\055\100\056\052\057\070" +
    "\060\065\061\101\062\061\063\073\064\116\001\002\000" +
    "\004\011\216\001\002\000\004\017\217\001\002\000\064" +
    "\010\037\012\062\015\032\033\053\034\057\036\040\037" +
    "\017\040\012\041\034\042\007\043\006\045\054\050\075" +
    "\051\107\052\042\053\055\054\064\055\100\056\052\057" +
    "\070\060\065\061\101\062\061\063\073\064\110\001\002" +
    "\000\066\010\037\012\062\015\032\020\221\033\053\034" +
    "\057\036\040\037\017\040\012\041\034\042\007\043\006" +
    "\045\054\050\075\051\107\052\042\053\055\054\064\055" +
    "\100\056\052\057\070\060\065\061\101\062\061\063\073" +
    "\064\110\001\002\000\072\010\uffc4\012\uffc4\015\uffc4\020" +
    "\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\001\002\000" +
    "\034\010\037\012\062\015\032\033\053\034\057\055\100" +
    "\056\052\057\070\060\065\061\101\062\061\063\073\064" +
    "\116\001\002\000\004\011\224\001\002\000\004\017\225" +
    "\001\002\000\064\010\037\012\062\015\032\033\053\034" +
    "\057\036\040\037\017\040\012\041\034\042\007\043\006" +
    "\045\054\050\075\051\107\052\042\053\055\054\064\055" +
    "\100\056\052\057\070\060\065\061\101\062\061\063\073" +
    "\064\110\001\002\000\066\010\037\012\062\015\032\020" +
    "\227\033\053\034\057\036\040\037\017\040\012\041\034" +
    "\042\007\043\006\045\054\050\075\051\107\052\042\053" +
    "\055\054\064\055\100\056\052\057\070\060\065\061\101" +
    "\062\061\063\073\064\110\001\002\000\072\010\uffc5\012" +
    "\uffc5\015\uffc5\020\uffc5\033\uffc5\034\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\001\002\000\064\010\037\012\062\015\032\033\053" +
    "\034\057\036\040\037\017\040\012\041\034\042\007\043" +
    "\006\045\054\050\075\051\107\052\042\053\055\054\064" +
    "\055\100\056\052\057\070\060\065\061\101\062\061\063" +
    "\073\064\110\001\002\000\066\010\037\012\062\015\032" +
    "\020\232\033\053\034\057\036\040\037\017\040\012\041" +
    "\034\042\007\043\006\045\054\050\075\051\107\052\042" +
    "\053\055\054\064\055\100\056\052\057\070\060\065\061" +
    "\101\062\061\063\073\064\110\001\002\000\066\010\uffc3" +
    "\012\uffc3\015\uffc3\020\uffc3\033\uffc3\034\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\045\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002" +
    "\000\066\010\uffaa\012\uffaa\015\uffaa\020\uffaa\033\uffaa\034" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\045\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\001\002\000\042\007\uffea\011\uffea\012\uffea\013" +
    "\uffea\016\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\065\uffea\001" +
    "\002\000\006\010\uffe7\061\uffe7\001\002\000\006\010\uffe4" +
    "\061\uffe4\001\002\000\006\010\uffe5\061\uffe5\001\002\000" +
    "\006\010\243\061\242\001\002\000\006\010\uffe6\061\uffe6" +
    "\001\002\000\022\004\uffdc\005\uffdc\006\uffdc\011\uffdc\016" +
    "\uffdc\021\uffdc\035\uffdc\065\uffdc\001\002\000\034\010\246" +
    "\012\062\015\032\033\053\034\057\055\100\056\052\057" +
    "\070\060\065\061\247\062\061\063\073\064\116\001\002" +
    "\000\022\004\uffdd\005\uffdd\006\uffdd\011\uffdd\016\uffdd\021" +
    "\uffdd\035\uffdd\065\uffdd\001\002\000\004\011\263\001\002" +
    "\000\030\012\062\015\032\033\053\034\057\055\100\056" +
    "\052\057\070\060\065\062\061\063\073\064\116\001\002" +
    "\000\026\011\uffd0\016\uffd0\021\uffd0\022\uffd0\023\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\065\uffd0\001\002\000\020" +
    "\007\254\011\253\012\257\013\252\024\260\031\255\032" +
    "\256\001\002\000\020\007\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\024\uffe3\031\uffe3\032\uffe3\001\002\000\030\012\ufff6\015" +
    "\ufff6\033\ufff6\034\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\001\002\000\026\011\uffcf\016" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\065\uffcf\001\002\000\030\012\ufff4\015\ufff4\033" +
    "\ufff4\034\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\001\002\000\030\012\ufff3\015\ufff3\033" +
    "\ufff3\034\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\001\002\000\030\012\ufff1\015\ufff1\033" +
    "\ufff1\034\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\001\002\000\030\012\ufff5\015\ufff5\033" +
    "\ufff5\034\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\001\002\000\030\012\ufff2\015\ufff2\033" +
    "\ufff2\034\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\001\002\000\030\012\062\015\032\033" +
    "\053\034\057\055\100\056\052\057\070\060\065\062\061" +
    "\063\073\064\116\001\002\000\026\007\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\016\uffe2\021\uffe2\024\uffe2\031\uffe2\032\uffe2" +
    "\065\uffe2\001\002\000\022\004\uffdb\005\uffdb\006\uffdb\011" +
    "\uffdb\016\uffdb\021\uffdb\035\uffdb\065\uffdb\001\002\000\042" +
    "\007\uffe8\011\uffe8\012\uffe8\013\uffe8\016\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\065\uffe8\001\002\000\066\010\uffa6\012" +
    "\uffa6\015\uffa6\020\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\045\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002\000" +
    "\004\065\uffb8\001\002\000\034\010\037\012\062\015\032" +
    "\033\053\034\057\055\100\056\052\057\070\060\065\061" +
    "\101\062\061\063\073\064\116\001\002\000\004\011\271" +
    "\001\002\000\004\017\272\001\002\000\064\010\037\012" +
    "\062\015\032\033\053\034\057\036\040\037\017\040\012" +
    "\041\034\042\007\043\006\045\054\050\075\051\107\052" +
    "\042\053\055\054\064\055\100\056\052\057\070\060\065" +
    "\061\101\062\061\063\073\064\110\001\002\000\066\010" +
    "\037\012\062\015\032\020\274\033\053\034\057\036\040" +
    "\037\017\040\012\041\034\042\007\043\006\045\054\050" +
    "\075\051\107\052\042\053\055\054\064\055\100\056\052" +
    "\057\070\060\065\061\101\062\061\063\073\064\110\001" +
    "\002\000\072\010\uffc6\012\uffc6\015\uffc6\020\uffc6\033\uffc6" +
    "\034\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\001\002\000\042\007\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\016\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\065\uffe9\001\002\000\034\010\037\012\062\015" +
    "\032\033\053\034\057\055\100\056\052\057\070\060\065" +
    "\061\101\062\061\063\073\064\116\001\002\000\004\011" +
    "\300\001\002\000\042\007\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\016\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\065\uff8b\001\002" +
    "\000\066\010\uffa9\012\uffa9\015\uffa9\020\uffa9\033\uffa9\034" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\045\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\001\002\000\066\010\uffa4\012\uffa4\015\uffa4\020" +
    "\uffa4\033\uffa4\034\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\045\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\001\002\000\034\010\uffed\012" +
    "\uffed\015\uffed\033\uffed\034\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\001\002\000" +
    "\034\010\uffef\012\uffef\015\uffef\033\uffef\034\uffef\055\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\001\002\000\034\010\246\012\062\015\032\033\053" +
    "\034\057\055\100\056\052\057\070\060\065\061\247\062" +
    "\061\063\073\064\116\001\002\000\034\010\uffec\012\uffec" +
    "\015\uffec\033\uffec\034\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\063\uffec\064\uffec\001\002\000\034" +
    "\010\uffeb\012\uffeb\015\uffeb\033\uffeb\034\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\001\002\000\034\010\ufff0\012\ufff0\015\ufff0\033\ufff0\034" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\001\002\000\034\010\uffee\012\uffee\015" +
    "\uffee\033\uffee\034\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\062\uffee\063\uffee\064\uffee\001\002\000\012\011" +
    "\uffdf\016\uffdf\021\uffdf\065\uffdf\001\002\000\020\002\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\001" +
    "\002\000\016\036\317\037\017\040\012\041\316\042\007" +
    "\043\006\001\002\000\004\065\326\001\002\000\004\064" +
    "\323\001\002\000\004\064\320\001\002\000\004\014\321" +
    "\001\002\000\034\010\037\012\062\015\032\033\053\034" +
    "\057\055\100\056\052\057\070\060\065\061\101\062\061" +
    "\063\073\064\116\001\002\000\004\065\uff94\001\002\000" +
    "\004\014\324\001\002\000\034\010\037\012\062\015\032" +
    "\033\053\034\057\055\100\056\052\057\070\060\065\061" +
    "\101\062\061\063\073\064\116\001\002\000\004\065\uff93" +
    "\001\002\000\034\010\037\012\062\015\032\033\053\034" +
    "\057\055\100\056\052\057\070\060\065\061\101\062\061" +
    "\063\073\064\116\001\002\000\004\065\330\001\002\000" +
    "\034\010\037\012\062\015\032\033\053\034\057\055\100" +
    "\056\052\057\070\060\065\061\101\062\061\063\073\064" +
    "\116\001\002\000\004\011\332\001\002\000\004\017\333" +
    "\001\002\000\064\010\037\012\062\015\032\033\053\034" +
    "\057\036\040\037\017\040\012\041\034\042\007\043\006" +
    "\045\054\050\075\051\107\052\042\053\055\054\064\055" +
    "\100\056\052\057\070\060\065\061\101\062\061\063\073" +
    "\064\110\001\002\000\066\010\037\012\062\015\032\020" +
    "\335\033\053\034\057\036\040\037\017\040\012\041\034" +
    "\042\007\043\006\045\054\050\075\051\107\052\042\053" +
    "\055\054\064\055\100\056\052\057\070\060\065\061\101" +
    "\062\061\063\073\064\110\001\002\000\066\010\uffc0\012" +
    "\uffc0\015\uffc0\020\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\001\002\000" +
    "\006\014\321\015\337\001\002\000\004\057\340\001\002" +
    "\000\004\016\341\001\002\000\004\065\342\001\002\000" +
    "\004\065\uff97\001\002\000\006\014\324\015\344\001\002" +
    "\000\004\057\345\001\002\000\004\016\346\001\002\000" +
    "\004\065\347\001\002\000\004\065\uff96\001\002\000\006" +
    "\016\351\021\137\001\002\000\042\007\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\016\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\065" +
    "\uffd3\001\002\000\004\064\353\001\002\000\006\011\uffa0" +
    "\021\uffa0\001\002\000\006\011\uffa1\021\uffa1\001\002\000" +
    "\064\010\037\012\062\015\032\033\053\034\057\036\040" +
    "\037\017\040\012\041\034\042\007\043\006\045\054\050" +
    "\075\051\107\052\042\053\055\054\064\055\100\056\052" +
    "\057\070\060\065\061\101\062\061\063\073\064\110\001" +
    "\002\000\066\010\037\012\062\015\032\020\357\033\053" +
    "\034\057\036\040\037\017\040\012\041\034\042\007\043" +
    "\006\045\054\050\075\051\107\052\042\053\055\054\064" +
    "\055\100\056\052\057\070\060\065\061\101\062\061\063" +
    "\073\064\110\001\002\000\020\002\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\001\002\000\020\002" +
    "\ufffe\036\022\037\017\040\012\041\016\042\007\043\006" +
    "\001\002\000\020\002\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\001\002\000\020\002\ufffc\036\022" +
    "\037\017\040\012\041\016\042\007\043\006\001\002\000" +
    "\004\002\001\001\002\000\020\002\ufffd\036\022\037\017" +
    "\040\012\041\016\042\007\043\006\001\002\000\004\010" +
    "\366\001\002\000\004\011\367\001\002\000\004\017\370" +
    "\001\002\000\064\010\037\012\062\015\032\033\053\034" +
    "\057\036\040\037\017\040\012\041\034\042\007\043\006" +
    "\045\054\050\075\051\107\052\042\053\055\054\064\055" +
    "\100\056\052\057\070\060\065\061\101\062\061\063\073" +
    "\064\110\001\002\000\066\010\037\012\062\015\032\020" +
    "\372\033\053\034\057\036\040\037\017\040\012\041\034" +
    "\042\007\043\006\045\054\050\075\051\107\052\042\053" +
    "\055\054\064\055\100\056\052\057\070\060\065\061\101" +
    "\062\061\063\073\064\110\001\002\000\020\002\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\016\002\010\003\003\004\007\005\012\041" +
    "\014\042\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\363\041" +
    "\014\042\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\357\041\360\042\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\024\042\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\351\001\001\000\002\001\001\000" +
    "\070\006\062\011\046\013\032\014\103\015\057\016\076" +
    "\017\042\020\047\021\044\023\066\025\065\026\105\027" +
    "\073\030\034\031\101\032\055\034\030\035\104\036\075" +
    "\037\043\042\071\043\050\045\070\046\102\047\045\050" +
    "\035\052\040\001\001\000\002\001\001\000\036\006\134" +
    "\011\046\013\032\014\103\015\057\016\076\017\042\020" +
    "\047\021\044\022\347\034\030\046\116\050\035\052\040" +
    "\001\001\000\004\010\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\046\013\247" +
    "\014\244\020\047\021\044\034\030\046\116\050\035\052" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\006\062\011\046\013" +
    "\032\014\103\015\057\016\076\017\042\020\047\021\044" +
    "\023\066\025\065\026\105\027\073\030\034\031\101\032" +
    "\055\034\030\035\104\036\147\042\071\043\050\045\070" +
    "\046\102\047\045\050\035\052\040\001\001\000\004\007" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\265\011\046\013\032" +
    "\014\103\015\057\016\076\017\042\020\047\021\044\034" +
    "\030\046\116\050\035\052\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\237\001\001\000\002\001" +
    "\001\000\004\051\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\210\057\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\110\001\001\000\002\001" +
    "\001\000\010\033\127\055\132\056\123\001\001\000\002" +
    "\001\001\000\034\006\114\011\046\013\032\014\103\015" +
    "\057\016\076\017\042\020\047\021\044\034\030\046\116" +
    "\050\035\052\040\001\001\000\002\001\001\000\004\044" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\006\134\011\046\013\032\014\103" +
    "\015\057\016\076\017\042\020\047\021\044\022\135\034" +
    "\030\046\116\050\035\052\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\140\011\046\013\032\014" +
    "\103\015\057\016\076\017\042\020\047\021\044\034\030" +
    "\046\116\050\035\052\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\143\011\046\013\032\014\103" +
    "\015\057\016\076\017\042\020\047\021\044\034\030\046" +
    "\116\050\035\052\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\006\062\011\046\013\032\014\103\015" +
    "\057\016\076\017\042\020\047\021\044\023\066\025\065" +
    "\026\105\027\073\030\034\031\101\032\055\034\030\035" +
    "\104\036\075\037\145\042\071\043\050\045\070\046\102" +
    "\047\045\050\035\052\040\001\001\000\066\006\062\011" +
    "\046\013\032\014\103\015\057\016\076\017\042\020\047" +
    "\021\044\023\066\025\065\026\105\027\073\030\034\031" +
    "\101\032\055\034\030\035\104\036\147\042\071\043\050" +
    "\045\070\046\102\047\045\050\035\052\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\011\046\014\103\015\057\016\152\017\042\020\153\021" +
    "\044\034\030\046\116\050\035\052\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\161\011\046\013\032" +
    "\014\103\015\057\016\076\017\042\020\047\021\044\034" +
    "\030\046\116\050\035\052\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\046\014\103\015\057\016" +
    "\171\017\042\020\153\021\044\034\030\046\116\050\035" +
    "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\006\062\011\046\013\032\014\103\015\057\016\076" +
    "\017\042\020\047\021\044\023\066\025\065\026\105\027" +
    "\073\030\034\031\101\032\055\034\030\035\104\036\075" +
    "\037\174\042\071\043\050\045\070\046\102\047\045\050" +
    "\035\052\040\001\001\000\066\006\062\011\046\013\032" +
    "\014\103\015\057\016\076\017\042\020\047\021\044\023" +
    "\066\025\065\026\105\027\073\030\034\031\101\032\055" +
    "\034\030\035\104\036\147\042\071\043\050\045\070\046" +
    "\102\047\045\050\035\052\040\001\001\000\002\001\001" +
    "\000\004\044\177\001\001\000\002\001\001\000\034\006" +
    "\201\011\046\013\032\014\103\015\057\016\076\017\042" +
    "\020\047\021\044\034\030\046\116\050\035\052\040\001" +
    "\001\000\002\001\001\000\034\006\203\011\046\013\032" +
    "\014\103\015\057\016\076\017\042\020\047\021\044\034" +
    "\030\046\116\050\035\052\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\046\014\103\015\057\016" +
    "\214\017\042\020\153\021\044\034\030\046\116\050\035" +
    "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\006\062\011\046\013\032\014\103\015\057\016\076" +
    "\017\042\020\047\021\044\023\066\025\065\026\105\027" +
    "\073\030\034\031\101\032\055\034\030\035\104\036\075" +
    "\037\217\042\071\043\050\045\070\046\102\047\045\050" +
    "\035\052\040\001\001\000\066\006\062\011\046\013\032" +
    "\014\103\015\057\016\076\017\042\020\047\021\044\023" +
    "\066\025\065\026\105\027\073\030\034\031\101\032\055" +
    "\034\030\035\104\036\147\042\071\043\050\045\070\046" +
    "\102\047\045\050\035\052\040\001\001\000\002\001\001" +
    "\000\030\011\046\014\103\015\057\016\222\017\042\020" +
    "\153\021\044\034\030\046\116\050\035\052\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\006\062\011" +
    "\046\013\032\014\103\015\057\016\076\017\042\020\047" +
    "\021\044\023\066\025\065\026\105\027\073\030\034\031" +
    "\101\032\055\034\030\035\104\036\075\037\225\042\071" +
    "\043\050\045\070\046\102\047\045\050\035\052\040\001" +
    "\001\000\066\006\062\011\046\013\032\014\103\015\057" +
    "\016\076\017\042\020\047\021\044\023\066\025\065\026" +
    "\105\027\073\030\034\031\101\032\055\034\030\035\104" +
    "\036\147\042\071\043\050\045\070\046\102\047\045\050" +
    "\035\052\040\001\001\000\002\001\001\000\070\006\062" +
    "\011\046\013\032\014\103\015\057\016\076\017\042\020" +
    "\047\021\044\023\066\025\065\026\105\027\073\030\034" +
    "\031\101\032\055\034\030\035\104\036\075\037\230\042" +
    "\071\043\050\045\070\046\102\047\045\050\035\052\040" +
    "\001\001\000\066\006\062\011\046\013\032\014\103\015" +
    "\057\016\076\017\042\020\047\021\044\023\066\025\065" +
    "\026\105\027\073\030\034\031\101\032\055\034\030\035" +
    "\104\036\147\042\071\043\050\045\070\046\102\047\045" +
    "\050\035\052\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\046\014\244\020\153" +
    "\021\044\034\030\046\116\050\035\052\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\046\013\247" +
    "\020\250\034\030\046\116\050\035\052\040\001\001\000" +
    "\002\001\001\000\004\010\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\046\020\261\034\030\046\116\050" +
    "\035\052\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\046\014\103\015\057\016\267\017\042\020\153" +
    "\021\044\034\030\046\116\050\035\052\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\006\062\011\046" +
    "\013\032\014\103\015\057\016\076\017\042\020\047\021" +
    "\044\023\066\025\065\026\105\027\073\030\034\031\101" +
    "\032\055\034\030\035\104\036\075\037\272\042\071\043" +
    "\050\045\070\046\102\047\045\050\035\052\040\001\001" +
    "\000\066\006\062\011\046\013\032\014\103\015\057\016" +
    "\076\017\042\020\047\021\044\023\066\025\065\026\105" +
    "\027\073\030\034\031\101\032\055\034\030\035\104\036" +
    "\147\042\071\043\050\045\070\046\102\047\045\050\035" +
    "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\276\011\046\013\032\014\103\015\057\016\076" +
    "\017\042\020\047\021\044\034\030\046\116\050\035\052" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\046\020\153\021\311\034\030\046\116" +
    "\050\035\052\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\071\045\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\321\011\046\013\032\014\103\015" +
    "\057\016\076\017\042\020\047\021\044\034\030\046\116" +
    "\050\035\052\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\324\011\046\013\032\014\103\015\057" +
    "\016\076\017\042\020\047\021\044\034\030\046\116\050" +
    "\035\052\040\001\001\000\002\001\001\000\030\011\046" +
    "\014\103\015\057\016\326\017\042\020\153\021\044\034" +
    "\030\046\116\050\035\052\040\001\001\000\002\001\001" +
    "\000\034\006\330\011\046\013\032\014\103\015\057\016" +
    "\076\017\042\020\047\021\044\034\030\046\116\050\035" +
    "\052\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\006\062\011\046\013\032\014\103\015\057\016\076" +
    "\017\042\020\047\021\044\023\066\025\065\026\105\027" +
    "\073\030\034\031\101\032\055\034\030\035\104\036\075" +
    "\037\333\042\071\043\050\045\070\046\102\047\045\050" +
    "\035\052\040\001\001\000\066\006\062\011\046\013\032" +
    "\014\103\015\057\016\076\017\042\020\047\021\044\023" +
    "\066\025\065\026\105\027\073\030\034\031\101\032\055" +
    "\034\030\035\104\036\147\042\071\043\050\045\070\046" +
    "\102\047\045\050\035\052\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\006\062\011" +
    "\046\013\032\014\103\015\057\016\076\017\042\020\047" +
    "\021\044\023\066\025\065\026\105\027\073\030\034\031" +
    "\101\032\055\034\030\035\104\036\075\037\355\042\071" +
    "\043\050\045\070\046\102\047\045\050\035\052\040\001" +
    "\001\000\066\006\062\011\046\013\032\014\103\015\057" +
    "\016\076\017\042\020\047\021\044\023\066\025\065\026" +
    "\105\027\073\030\034\031\101\032\055\034\030\035\104" +
    "\036\147\042\071\043\050\045\070\046\102\047\045\050" +
    "\035\052\040\001\001\000\002\001\001\000\010\005\361" +
    "\041\014\042\013\001\001\000\002\001\001\000\006\041" +
    "\360\042\013\001\001\000\002\001\001\000\006\041\360" +
    "\042\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\006\062\011\046\013\032\014\103" +
    "\015\057\016\076\017\042\020\047\021\044\023\066\025" +
    "\065\026\105\027\073\030\034\031\101\032\055\034\030" +
    "\035\104\036\075\037\370\042\071\043\050\045\070\046" +
    "\102\047\045\050\035\052\040\001\001\000\066\006\062" +
    "\011\046\013\032\014\103\015\057\016\076\017\042\020" +
    "\047\021\044\023\066\025\065\026\105\027\073\030\034" +
    "\031\101\032\055\034\030\035\104\036\147\042\071\043" +
    "\050\045\070\046\102\047\045\050\035\052\040\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    
    Analizador s;
    parser(Analizador s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= main 
            {
              Object RESULT =null;
		 System.out.println("encontro main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= funciones main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= main funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= funciones main funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= INT MAIN LPAREN RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= funciones declaraFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= declaraFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= expresionRelLog 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionRellogica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= expresionAritmetica 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionAritmetica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operadorArit ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operadorArit ::= MENOS 
            {
              Object RESULT =null;
		 System.out.println("encontro MENOS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operadorArit ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operadorArit ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operadorArit ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opRelacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opRelacional ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opRelacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opRelacional ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opRelacional ::= EQUAL 
            {
              Object RESULT =null;
		 System.out.println("encontro EQUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opRelacional ::= NOTEQUAL 
            {
              Object RESULT =null;
		 System.out.println("encontro NOTEQUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorUnario ::= MENOS numerico 
            {
              Object RESULT =null;
		System.out.println("encontro unario menos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorUnario ::= INCREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro unario incremento "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadorUnario ::= DECREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro unario decremento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadorLogico ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadorLogico ::= OR 
            {
              Object RESULT =null;
		 System.out.println("encontro logico or "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorLogico ::= REXC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorLogico ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionAritmetica ::= operandoArit 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionAritmetica ::= expresionAritmetica operadorArit operandoArit 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionAritmetica operadorArit operandoArit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionRelLog ::= expresionRelacional 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionRelacional"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelLog",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresionRelLog ::= expresionLogica 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionLogica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelLog",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresionRelacional ::= operandoRel opRelacional operandoRel 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoRel opRelacional operandoRel"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresionLogica ::= terminoLogico 
            {
              Object RESULT =null;
		 System.out.println("encontro terminoLogico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresionLogica ::= expresionLogica operadorLogico terminoLogico 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionLogica operadorLogico terminoLogico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // terminoLogico ::= LITERAL_BOOL 
            {
              Object RESULT =null;
		 System.out.println("encontro LITERAL_BOOL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // terminoLogico ::= LPAREN expresionRelacional RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operandoArit ::= IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       identifier"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operandoArit ::= LITERAL_STRING 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       LITERAL_STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operandoArit ::= LITERAL_INT 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       LITERAL_INT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operandoArit ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       LITERAL_FLOAT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operandoArit ::= LITERAL_CHAR 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       LITERAL_CHAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operandoArit ::= llamaFuncion 
            {
              Object RESULT =null;
		 System.out.println("encontro llamafuncion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operandoArit ::= operadorUnario 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit  operadorUnarioxxx"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operandoArit ::= LBRACKET array RBRACKET 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operandoArit ::= getValorArray 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operandoRel ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operandoRel ::= LITERAL_BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operandoRel ::= LPAREN expresionAritmetica RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literales ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literales ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literales ::= LITERAL_BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literales ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literales ::= LITERAL_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literales ::= LBRACKET array RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // array ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // array ::= array COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if ::= IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elif ::= ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		 System.out.println("encontro elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elif ::= elif ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else ::= ELSE LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while ::= WHILE LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		 System.out.println("encontro while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // doWhile ::= DO LBRACE bloque RBRACE WHILE LPAREN expresionRelLog RPAREN DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro dowhile"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhile",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for ::= FOR LPAREN declaraVar DOLLAR expresionRelLog DOLLAR expresion RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		 System.out.println("encontro for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // estructuraControl ::= if 
            {
              Object RESULT =null;
		 System.out.println("encontro if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estructuraControl ::= if elif 
            {
              Object RESULT =null;
		 System.out.println("encontro if elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estructuraControl ::= if elif else 
            {
              Object RESULT =null;
		 System.out.println("encontro if elif else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructuraControl ::= if else 
            {
              Object RESULT =null;
		 System.out.println("encontro if else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estructuraControl ::= while 
            {
              Object RESULT =null;
		 System.out.println("encontro while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estructuraControl ::= doWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructuraControl ::= for 
            {
              Object RESULT =null;
		 System.out.println("encontro for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return ::= RETURN expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro  RETURN expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return ::= RETURN 
            {
              Object RESULT =null;
		 System.out.println("encontro RETURN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // break ::= BREAK 
            {
              Object RESULT =null;
		 System.out.println("encontro BREAK"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // argumento ::= IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro IDENTIFIER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // argumento ::= literales 
            {
              Object RESULT =null;
		 System.out.println("encontro literales"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // argumentos ::= argumento 
            {
              Object RESULT =null;
		 System.out.println("encontro argumento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // argumentos ::= argumentos COMA expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro argumentos COMA expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamaFuncion ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		 System.out.println("encontro IDENTIFIER  LPAREN RPAREN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llamaFuncion ::= IDENTIFIER LPAREN argumentos RPAREN 
            {
              Object RESULT =null;
		 System.out.println("encontro IDENTIFIER LPAREN argumentos RPAREN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamaFuncion ::= lectura 
            {
              Object RESULT =null;
		 System.out.println("encontro lectura"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamaFuncion ::= escritura 
            {
              Object RESULT =null;
		 System.out.println("encontro escritura"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacion ::= IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro IDENTIFIER ASIG expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia ::= asignacion DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;
		 System.out.println("encontro estructuracontrol"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia ::= expresion DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro expresion DOLLAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= declaraArray DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro declara DOLLAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= declaraVar DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro sentencia -> declaraVar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= return DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro return dollar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia ::= break DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro break DOLLAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia ::= getValorArray DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro getValorArray DOLLAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia ::= setValorArray DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro setValorArray DOLLAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bloque ::= sentencia 
            {
              Object RESULT =null;
		 System.out.println("encontro sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;
		 System.out.println("encontro bloque sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametros ::= tipo IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro tipo IDENTIFIER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros ::= parametros COMA tipo IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro parametros COMA tipo IDENTIFIER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaraFuncion ::= tipo IDENTIFIER LPAREN parametros RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		 System.out.println("encontro tipo IDENTIFIER LPAREN parametros RPAREN LBRACE bloque RBRACE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaraFuncion ::= tipo IDENTIFIER LPAREN RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		 System.out.println("encontro tipo IDENTIFIER LPAREN RPAREN LBRACE bloque RBRACE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipo ::= INT 
            {
              Object RESULT =null;
		 System.out.println("encontro int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 System.out.println("encontro char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("encontro FLOAT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipo ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("encontro string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipo ::= ARRAY 
            {
              Object RESULT =null;
		 System.out.println("encontro array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 System.out.println("encontro bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaraArray ::= INT IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro  INT IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArray",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaraArray ::= CHAR IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro CHAR IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArray",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaraArrayAux ::= LBRACKET LITERAL_INT RBRACKET 
            {
              Object RESULT =null;
		 System.out.println("encontro LBRACKET LITERAL_INT RBRACKET"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArrayAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaraVar ::= INT IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro INT IDENTIFIER ASIG expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaraVar ::= CHAR IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro CHAR IDENTIFIER ASIG expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaraVar ::= tipo IDENTIFIER declaraArrayAux ASIG expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro tipo IDENTIFIER declaraArrayAux ASIG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaraVar ::= tipo IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro tipo IDENTIFIER ASIG expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // getValorArray ::= IDENTIFIER declaraArrayAux 
            {
              Object RESULT =null;
		 System.out.println("encontro getValorArray"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("getValorArray",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // setValorArray ::= getValorArray ASIG expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro set valor array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setValorArray",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lectura ::= LEER LPAREN numerico RPAREN 
            {
              Object RESULT =null;
		 System.out.println("encontro lectura"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // numerico ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // numerico ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		 System.out.println("encontro numerico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // escritura ::= ESCRIBIR LPAREN expresion RPAREN 
            {
              Object RESULT =null;
		 System.out.println("encontro escribir"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
